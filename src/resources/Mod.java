package resources;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import screen.BaseBitmap;
import screen.BaseScreen;

public class Mod {
	private static final String[] names = new String[] { "area" };
	public static List<BaseBitmap> moddedAreas = new ArrayList<BaseBitmap>();

	private static Comparator<File> ALPHABETICAL_ORDER = new Comparator<File>() {
		@Override
		public int compare(File file1, File file2) {
			String str1 = file1.getName();
			String str2 = file2.getName();
			int res = String.CASE_INSENSITIVE_ORDER.compare(str1, str2);
			return (res != 0) ? res : str1.compareTo(str2);
		}
	};

	public static void loadModdedResources(BaseScreen screen) {
		initialization();
		File directory = new File("mod");
		if (directory.exists()) {
			List<File> list = Mod.getContents(directory);
			Collections.sort(list, ALPHABETICAL_ORDER);
			for (File f : list) {
				moddedAreas.add(screen.load(f));
			}
		}
		else
			throw new RuntimeException("Something is wrong with detecting the mod folder.");

	}

	private static void initialization() {
		File directory = new File("mod");
		if (!directory.exists())
			directory.mkdir();
		if (directory.exists()) {

			for (int namesIterator = 0; namesIterator < names.length; namesIterator++) {
				File folder = new File(directory.getPath() + File.separator + names[namesIterator]);
				if (!folder.exists())
					folder.mkdir();
				if (folder.exists()) {
					switch (namesIterator) {
						case 0: {//area
							File text = new File(folder.getPath() + File.separator + "readme.txt");
							BufferedWriter writer = null;
							try {
								writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(text), "utf-8"));
								writer.write("This is a readme generated by Java code.");
								writer.newLine();
								writer.newLine();
								writer.write("Put your custom maps in this folder, and start the game. This will allow the game to load your");
								writer.newLine();
								writer.write("custom maps into the game, and take advantage of the editor's basic capabilities. But, the game");
								writer.newLine();
								writer.write("will then no longer load the default maps that were there, unless all of the custom maps have");
								writer.newLine();
								writer.write("been removed, or the game has been placed in a separate folder.");
								writer.newLine();
								writer.newLine();
								writer.write("All custom maps must be created and saved by the editor. The file format of the maps is PNG.");
								writer.newLine();
								writer.newLine();
								writer.write("Note that the game first sorts your maps in alphabetical order, then apply IDs according to");
								writer.newLine();
								writer.write("the order of the sorted maps, from first to last. Here's an example:");
								writer.newLine();
								writer.newLine();
								writer.write("\"my_area.png\", \"my_cave.png\"");
								writer.newLine();
								writer.newLine();
								writer.write("The first map has the ID of 1, the second map has the ID of 2. If there are more maps, it");
								writer.newLine();
								writer.write("continues counting up. 3, 4, 5, and so on. Use these generated IDs for your editor, if you");
								writer.newLine();
								writer.write("want to have area connections in the OverWorld. Please read the specifications hosted at");
								writer.newLine();
								writer.write("GitHub (link down below) for more information on applying area connections in the level editor.");
								writer.newLine();
								writer.newLine();
								writer.write("Thanks for reading. If you appreciated this game, you may leave a message on the forums below:");
								writer.newLine();
								writer.newLine();
								writer.write("The Helper Forums: http://www.thehelper.net/threads/java-pok%C3%A9mon-walking-algorithm.159287/");
								writer.newLine();
								writer.write("Java-Gaming.org: http://www.java-gaming.org/topics/pok-mon-walking/32546/view.html");
								writer.newLine();
								writer.write("GitHub Project Page: http://github.com/tommai78101/PokemonWalking");
								writer.newLine();
								writer.newLine();
								writer.write("All messages are welcomed. We (developers) loved to read feedbacks!");
							}
							catch (Exception e) {
							}
							finally {
								try {
									writer.close();
								}
								catch (Exception e) {
								}
							}
							break;
						}
						default: {
							break;
						}
					}
				}
			}
		}
	}

	private static List<File> getContents(File file) {
		List<File> results = new ArrayList<File>();
		if (file.exists()) {
			if (file.isDirectory()) {
				File[] list = file.listFiles();
				for (int i = 0; i < list.length; i++) {
					results.addAll(getContents(list[i]));
				}
			}
			else {
				String filename = file.getPath();
				int dotCount = filename.lastIndexOf('.');
				int pathDotCount = Math.max(filename.lastIndexOf('/'), filename.lastIndexOf('\\'));
				if (dotCount > pathDotCount) {
					if (filename.substring(dotCount + 1).toLowerCase().equals("png"))
						results.add(file);
				}
			}
		}
		return results;
	}

	@SuppressWarnings("unused")
	private static int getFilesCount(File file) {
		File[] files = file.listFiles();
		int count = 0;
		for (File f : files)
			if (f.isDirectory())
				count += getFilesCount(f);
			else
				count++;
		return count;
	}
}

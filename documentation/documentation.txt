Pokémon Walking - Documentation

Changelogs:
r6: Added more tiles.
r5: Added a beginner's section, "How to Debug."
r4: Added new tiles to the Tiles section.
r3: Finished the draft.
r2: Added the history.
r1: First draft - using GameFaqs format.

-------------------------------

Table of Contents

To find the chapter you wanted to view, either scroll down
below, or use the Find (CTRL+F) method to search for the
tag the chapters are linked to.



Abstract...........................[PWD01]
About the Project..................[PWD02]
	History........................[PWD02#01]
How to Debug.......................[PWD03]
Metadata...........................[PWD04]
	PixelData......................[PWD04#01]
	Areas..........................[PWD04#02]
		Overworld..................[PWD04#02@01]
		Sector.....................[PWD04#02@02]
	Tiles..........................[PWD04#03]
		Grass......................[PWD04#03@01]
		Ledge......................[PWD04#03@02]
		Tree.......................[PWD04#03@03]
		Warp Point.................[PWD04#03@04]
		Area Connection Point......[PWD04#03@05]
		Stairs.....................[PWD04#03@06]
Player.............................[PWD05]
Controls...........................[PWD06]
	Walking Algorithm..............[PWD06#01]
Contributors.......................[PWD07]
Terms of License...................[PWD08]
Credits............................[PWD09]



-------------------------------

Abstract [PWD01]

Port of Pokémon walking movements from old-generation 
Pokémon games. Nothing else is going to be ported to
this project, such as battling, and official Pokémon
related activities the official released versions do
provide us with.

-------------------------------

About the Project [PWD02]

The project is a port of the walking algorithm used 
in 2nd generation Pokémon games. There are no future
plans to add the 1st generation walking algorithm into
this project.

All arts are entirely placeholder. Some of the artwork
may be here to stay.

-  -  -  -  -  -  -  -  -  -  -

	History [PWD02#01]

The concept was created out of spite. The developer,
tom_mai78101, felt that there was no easy way of
creating custom dialogues and characters to share to
others for jokes and fun. He does not want to learn
to hack Pokémon games just for such a simple task, 
but the developer could not put down the idea.

Frustrated, the developer created "Pokémon Dialogue
Editor," which is this project's first tentative
title.

Then, bored and lacking a plan, the developer moved on
to create "Pixavive Survival," a real-time 2D pixel
strategy game. 

Packed with new ideas and tricks, the developer went
back to this project and decided to redo the drawing
board, but came to a halt. Even with new ideas, the
developer could not come up with something original
that can be used in this project.

Looking back to the past, the developer decided to do
something more simple. Something that has to do with
Pokémon, and it has to be easy to see. It turns out to
be the game genre, role-playing game.

Rewriting the game engine, the developer created a
working application, where the player controls an
object using arrow keys as input. The developer wanted
to have a retro feel when the player is exploring what
was then an empty, blank canvas. The first thing that
sprung up was the walking algorithm Pokémon games used.

The developer first created tiles and placeholder art
used as obstacles. For the obstacles, the collision 
detection and response came from "Pixavive Survival."
Then comes the player, which was mostly copied from
Pokémon character sprite designs. It's really hard to
draw a human in a 16x16 square, especially when trying
to make human body parts apparent and easy to tell.

At first, the developer thought the Pokémon character
that was created is going to be a placeholder art until
the end of this project. Overtime, the developer started
to like the character design, and decided to keep it in,
and move on to working on the walking algorithm.

Once the developer implemented the walking algorithm,
it became apparent that the walking algorithm requires
tons and tons of tweaking and fixing bugs. This has led
to many full releases at an early stage of development.

It was also during that time, the new and second 
tentative title, "Pokémon Walking algorithm," stuck.

The history of the early development can be read here 
from the link given below, with each of the releases and
their respective source codes being available for
download:

http://www.thehelper.net/threads/java-pok%C3%A9mon-walking-algorithm.159287/

It was not until the developer sees having a GitHub repo
is crucial, that moving the entire project to an online
server becomes neccesary. At v5, the move was completed.

At v6, it was finally ready for public release to a more
larger group of people, namely game programmers.

It was not until v7 did all the known issues have been
fixed. Now, the developer is currently busy with the
military service, and will update the project from time
to time.

-------------------------------

How to Debug [PWD03]

This section explains steps to debugging this project and
provide educational instructions to help new developers 
get to know the flow of this project.

The developer assumes you have already installed Git of
your choice (TortoiseGIT, Git, GitHub for Windows, etc.),
and your preferred Java IDE. This project uses JRE7, so
it is possible this project will be in need of an overhaul
once Java 8 has been released.

If you wish, you may skip certain sections and paragraphs
below.

To start, open your preferred IDE. In this case, the
documentation will use Eclipse IDE Kepler for Java. Once
the IDE has finished loading, open up your workspace
directory in the file explorer of your operating system.

Once in the directory, use "git clone" to obtain a copy
of the repository. Once finished, in your IDE, import the
cloned directory as an existing project.

In Eclipse, there's a feature that allows you to stop at
main() when you start running your application. Your
preferred IDE may or may not include this feature, thus
you may wish to look it up online to understand this
feature.

Now, in Eclipse, up at the top of the taskbar, click on
the following:

Run > Debug Configurations...

You should be able to see your application name in the
Java Application category in the left pane. In the right
pane, you should be in the Main tab. Near the bottom of
the Main tab, you should see a checkbox with "Stop at
main" text next to it. Go ahead and tick the checkbox.

Now, press "Debug" button.

Once here, use F5 to step in, F6 to step over, F7 to 
step out, F8 to continue, CTRL+SHIFT+B to set a breakpoint,
and F11 to debug again without stopping at main.

Recommended suggestion would be to use F5 or F6 repeatedly
until you have reached the same method for the third time.

This is to ensure that you have at least an understanding
of behind the scenes, and knowing what does what. 

-------------------------------

Metadata [PWD04]

This section contains class objects that were deemed to
have multiple properties. They are grouped together for
easier maintaining and adding new features for future
planning.

Each section is separated into group labels, with their
usages and functions all explained. Refer to this
section when adding/modifying/removing functions and
their data format, since this section will be modified
accordingly.

All of these groups have not been finalized so far. Do
not assume their information to be permanent.

-  -  -  -  -  -  -  -  -  -  -

	PixelData [PWD04#01]
	
	Every areas are created using an image editor. Theoretically,
	the preferred editor should either be GIMP or Paint.NET 
	for their ability to draw transparent pixels, opacity, or 
	pixels with alpha values not set to 0xFF.
	
	They are then saved as PNG image files. PNG file format is
	preferred, for their transparency support.
	
	Once the areas are loaded into the game, the pixels in the
	image files are then converted into PixelData objects.
	
	A single PixelData object contains the pixel color data. It
	is split into 4 bytes, each representing the alpha value (A),
	the red value (R), the green value (G), and the blue value
	(B). Each of these bytes determine the many different
	properties of their corresponding tiles that are to be used
	in the game for both game data and rendering.
	
	All values used are in hexidecimal numbers.
	
	The data format is given below:	
	AA RR GG BB
	
	The following shows the minimum and maximum range:
	00 00 00 00
	FF FF FF FF
	
	The following algorithms are used to obtain each values from
	a given pixel:	
	A = (pixel >> 24) & 0xFF
	R = (pixel >> 16) & 0xFF
	G = (pixel >> 8) & 0xFF
	B = pixel & 0xFF
	
	The following list shows what each byte represents:
	A: Tile ID
	R: Extended Tile ID/Tile-specific data.
	G: Tile-specific data.
	B: Tile-specific data.
	
	Tile ID represents what the pixel data is in a given area.
	There are 256 different types of Tile ID in total. Two 
	Tile IDs must not interfere, or be related, with each other.
	
	Extended Tile ID can represent the specifications of a given
	Tile ID. It helps to categorize different, but related tiles
	together. There are 256 different extended Tile IDs in
	total, thus allowing 1 Tile of 1 kind of Tile ID to have 256
	related Tile IDs for the game to use. The theoretical
	maximum total of Tiles, when combining Tile IDs and extended
	Tile IDs, is 65536, or 256 x 256 different combinations.
	
	Tile-specific data are used by the game accordingly with the
	corresponding Tile ID. This is entirely determined by the
	Tile the game uses and the area the Tile is in.
	
-  -  -  -  -  -  -  -  -  -  -
	
	Areas [PWD04#02]
	
	Mentioned before, each area is created using an image editor
	that can edit/modify alpha values. Preferrably, GIMP or
	Paint.NET may be a good choice.
	
	Due to limitations set by PixelData, the maximum theoretical
	size of an area is 256x256. This is determined by using
	2 bytes from a PixelData, each byte representing width and
	height respectively. This also means that the tile's 
	position a PixelData represents in the game can span from 
	(0, 0) to (255, 255) in a 256x256 area.
	
	The chosen 2 bytes are, again, determined by the tile the 
	Tile ID represents, and the area the tile is in. This goes
	with the "Tile-specific data" that is accordance with the
	PixelData data format.
	
~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

		Overworld [PWD04#02@01]
	
		In order to create a convincing overworld environment, the
		areas must be large and explorable. Near the borders of the
		areas, there must be a thickness of at least 5 tiles to the
		right, and 4 tiles to the left. To make it consistent, the
		overworld can have 5 tiles surounding the parameter.
		
		The overworld consists of large areas, easily consisting of
		many paths, varying terrain, and cities/towns. It is up to
		the map maker to decide on the content of the areas.
		
		No two areas should overlap, even if it's one single tile
		being overlapped. This is due to game design limitations, 
		which cannot be	easily changed.
		
~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

		Sector [PWD04#02@02]
		
		Each area consists of sectors, which tells the game to mark
		a section of an area a specific area of interest. This area
		of interest will be marked on a map of the overworld for
		players to see and view where they are going.
		
		Each sector has a name. The name can be anything of interest
		or depends on the size of the area of interest.
		
		When crossing a sector, the game updates the current
		whereabouts to the player. In order to update the game, the
		mark has to be set in the path of where the player must cross
		in order to enter a new area of interest.
	
-  -  -  -  -  -  -  -  -  -  -

	Tiles [PWD04#03]
	
	This section contains information of all available tiles used
	in the game. You may need to look up related tiles in order to
	find the tile you really wanted.
	
	Each tile consists of the following:
	
		Tile ID: 				The ID number and name of the tile.
		Extended Tile ID: 		The ID number used in conjunction of the
								Tile ID.
		Tile Specific ID:		The ID number defined in relation to the
								tile and that tile only.
		Full Data(s): 			The full data value, listed in the order
								of ARGB format. There can be more than
								one specific full data, if there are a
								certain number of different full datas,
								it will all be listed. If there are
								unknown number of different full datas,
								it will be listed with variables in them.
		Description:			Describes the properties of the tile, and
								how to use them accordingly.
								
	The maximum amount of tiles available in the game is 256. With
	extended tile IDs included, the maximum amount of tiles is
	65536.
	
	If there exists a situation where a single tile cannot be represented
	enough, then it will either be delegated into two or more different
	tiles, or there will probably be a format update, which may break
	backwards compatibility, and stop using an universal standard file 
	format.
	
~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ 
	
		Path [PWD04#03@01]
		
		Tile ID:
			A: 01 - Path
		Extended Tile ID:
			R: 00 - Grass.
			R: 01 - Mountain ground.
			R: 02 - Path.
		Tile Specific ID:
			G: 00 - Area Type.
			B: HH - Ground Height.
		Full Data(s):
			01 00 00 HH
			01 01 00 HH
			01 02 00 HH
		Description:
			Walkable path tiles, may also represents unpaved roads or 
			fields.
			
			Extended Tile ID is used to determine path biome type. Area
			Type is used to determine path biome color.
			
			Area Type determines the data type of path, which is used
			for other metadata uses. The full list of area types are
			given below:
			
				Area Type:
				   
					0x00 = Forest          
					0x01 = City            
					0x02 = Mountain 
					0x03 = Water
					0x04 = Cavern
					0x05 = Building
			
			More area types may be specified at a later time, or when it is
			required to add a new area type.
			
			Ground height specifies the light level drawn onto the
			screen.
			
~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

		Ledge [PWD04#03@02]
		
		Tile ID:
			A: 02 - Ledge
		Extended Tile ID:
			R: 00 - Bottom facing ledge
			R: 01 - Bottom left corner ledge
			R: 02 - Left facing ledge
			R: 03 - Top left corner ledge
			R: 04 - Top facing ledge
			R: 05 - Top right corner ledge
			R: 06 - Right facing ledge
			R: 07 - Bottom right corner ledge
			R: 08 - Bottom facing double ledge
			R: 09 - Bottom left corner double ledge
			R: 0A - Left facing double ledge
			R: 0B - Top left corner double ledge
			R: 0C - Top facing double ledge
			R: 0D - Top right corner double ledge
			R: 0E - Right facing double ledge
			R: 0F - Bottom right corner double ledge
			R: 10 - Bottom facing inner ledge
			R: 11 - Bottom left inner ledge
			R: 12 - Left facing inner ledge
			R: 13 - Top left inner ledge
			R: 14 - Top facing inner ledge
			R: 15 - Top right inner ledge
			R: 16 - Right facing inner ledge
			R: 17 - Bottom right inner ledge
		Tile Specific ID:
			G: 00 - Ground Height (Temporary)
			B: 00 - Ledge Type ID (Temporary)
		Full Data(s):
			02 RR 00 00
		Description:		
			Can be jumped across according to its height, which is determined
			by direction from where the player starts jumping. Horizontal
			ledge heights are determined by thickness of the ledge. If it's
			thick, it means top is higher than bottom. If it's thin, it means
			bottom is higher than top. Player can only jump from higher
			ground to lower ground.
			
			Higher ground is determined by the spacing of the ground. The side
			where the ground is larger in area represents area of higher
			ground.
			
			RR stands for one of the 8 cardinal directions the ledges are
			facing (N, S, E, W, NE, NW, SE, and SW).
			
			Ledge Type is used to categorize all kinds of ledges. There may be
			natural ledges, ramps for puzzles and traps, bicycle poles to hop
			around, etc. This may be temporary.
			
~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

		Tree [PWD04#03@03]
	
		Tile ID:
			A: 03 - Tree
		Extended Tile ID:
			R: 00 - Small tree
		Tile Specific ID:
			G: None specified.
			B: None specified.
		Full Data(s):
			03 00 00 00
		Description:
			An obstacle that blocks the Player's path. Currently, has no purposes
			in the game.
			
~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

		Warp Point [PWD04#03@04]
		
		Tile ID:
			A: 04 - Warp Point
		Extended Tile ID:
			R: XX - Target Area
		Tile Specific ID:
			G: WW - Player's X position in the target area
			B: HH - Player's Y position in the target area
		Full Data(s):
			04 XX WW HH
		Description:
			When stepped on, it warps the player to the target area. The RGB
			values are arbitrary, meaning that there is no defined constant for
			different target areas and different player target X and Y
			coordinates. The maximum amount of warp points for a single area is
			256. The range of where the player is to spawn in the area is 0 ~ 255.
			
~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

		Area Connection Point (ACP) [PWD04#03@05]
		
		Tile ID:
			A: 05 - Area Connection Point (ACP)
		Extended Tile ID:
			R: TT - Target Area ID
		Tile Specific ID:
			G: SS - Sector ID in Target Area
			B: 00 - None specified.
		Full Data(s):
			05 TT SS 00
		Description:
			When stepped on, it tells the game the player has moved into a new
			area. This new area is a separate image file loaded and initialized
			from the very beginning. 
			
			The target area ID is obtained from the
			pixel data and handled by the game in order to load the correct
			area from a list of all areas pre-loaded.
			
			The sector ID is used to tell the game what the new sector the player
			is in when entering a new area. This is required in order to identify
			the current sector.
			
~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

		Stairs [PWD04#03@06]
		
		Tile ID:
			A: 06 - Stairs
		Extended ID:
			R: 00 - Single-story Bottom
			R: 01 - Single-story Left
			R: 02 - Single-story Top
			R: 03 - Single-story Right
			R: 04 - Double-story bottom
			R: 05 - Double-story left
			R: 06 - Double-story top
			R: 07 - Double-story right
		Tile Specific ID:
			G: 00 - None specified.
			B: 00 - None specified.
		Full Data(s):
			06 00 00 00
			06 01 00 00
			06 02 00 00
			06 03 00 00
		Description:
			Lets the player move to a higher area in a small amount of time.
		
-------------------------------

Player [PWD05]

Currently, the Player is represented as "Joe," a 
character that appeared in the 2nd generation 
Pokémon games, Gold, Silver, and Crystal versions.

The character design and artwork were done by hand,
and they are merely placeholder art.

-------------------------------

Controls [PWD06]

To move the player around, use either WASD keys or 
the arrow keys. Tap any key to let the Player face 
towards the direction the tapped key represents.

-  -  -  -  -  -  -  -  -  -  -

	Walking Algorithm [PWD06#01]
	
	<To be continued...>

-------------------------------

Contributors [PWD07]

Developer - tom_mai78101

-------------------------------

Terms of License [PWD08]

This entire project is Apache Licensed. For more
information, please read the terms and regulations
of the license file in the root of the project folder.

-------------------------------

Credits [PWD09]

Author - tom_mai78101
